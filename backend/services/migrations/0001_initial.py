# Generated by Django 5.0.2 on 2024-03-22 21:32

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, verbose_name='название')),
                ('description', models.CharField(max_length=250, verbose_name='описание')),
                ('icon', models.ImageField(upload_to='services/services_photo', verbose_name='Фото профиля')),
            ],
            options={
                'verbose_name': 'Категория',
                'verbose_name_plural': 'Категории',
            },
        ),
        migrations.CreateModel(
            name='FAQ',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('question', models.CharField(max_length=250, verbose_name='Вопрос')),
                ('answer', models.CharField(max_length=1000, verbose_name='Ответ')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='Создатель вопроса')),
            ],
            options={
                'verbose_name': 'FAQ',
                'verbose_name_plural': 'FAQ',
            },
        ),
        migrations.CreateModel(
            name='Services',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=250, verbose_name='название')),
                ('services_duration', models.CharField(choices=[('one_month', 'Один месяц'), ('three_months', 'Три месяца'), ('six_months', 'Шесть месяцев'), ('one_year', 'Один год')], default='one_month', max_length=20, verbose_name='длительность подписки')),
                ('cost', models.FloatField(verbose_name='стоимость одного месяца')),
                ('subscription_type', models.CharField(blank=True, max_length=250, null=True, verbose_name='тип подписки')),
                ('category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='services.category', verbose_name='категория')),
            ],
            options={
                'verbose_name': 'Сервис',
                'verbose_name_plural': 'Сервисы',
            },
        ),
        migrations.CreateModel(
            name='Subscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('status', models.CharField(choices=[('enrolled', 'Подписан'), ('not_enrolled', 'Не подписан')], default='enrolled', max_length=20, verbose_name='статус подписки')),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='+', to='services.services')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='subscriptions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Подписка на сервис',
                'verbose_name_plural': 'Подписки на сервисы',
                'ordering': ('user',),
            },
        ),
        migrations.AddConstraint(
            model_name='subscription',
            constraint=models.UniqueConstraint(fields=('user', 'service'), name='unique_user_service'),
        ),
    ]
